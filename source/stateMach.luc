module stateMach (
    input clk,  // clock
    input rst,  // reset
    
    //player 1 btns
    input btn1,
    input btn2,
    input btn3,
    input btn4,
    input btn5,  // reset btn
    
    //player 2 btns
    input btn6,
    input btn7,
    input btn8,
    input btn9,
    input btn10,  // reset btn
    
    
    //output led[8],
    output instr[16],  // to ctl/alu
    input zap,
    output playerr[2],
    //input alu_output[16],
    
    output play_row_1[10],  // for current row, row 0 (p1)
    output play_row_2[10],  // for current row, row 0 (p2)
    //input curr_boardstate[6],  // current board state; bit 0 is play row of p1, bit 5 is play row of p2
    //output new_boardstate[6]   // return new board state
    output score_rows_1[3],
    output score_rows_2[3]
  ) {
  
  sig player[2];
  sig bo1;
  sig bo2;
  sig bo3;
  sig bo4;
  sig bo5;
  sig bo6;
  sig bo7;
  sig bo8;
  sig bo9;
  sig bo10;
  
  
  .clk(clk){
    

    dff stage1[2];  // stage for player 1
    dff stage2[2];  // stage for player 2
    dff led_counter[3];
    dff led_counter2[3];
    dff play[2];
    dff clear[1];
    dff cuicui[1];
    //dff xx[1];
    edge_detector edge_detector1(#RISE(0), #FALL(1));
    edge_detector edge_detector2(#RISE(0), #FALL(1));
    edge_detector edge_detector3(#RISE(0), #FALL(1));
    edge_detector edge_detector4(#RISE(0), #FALL(1));
    edge_detector edge_detector5(#RISE(0), #FALL(1));
    edge_detector edge_detector6(#RISE(0), #FALL(1));
    edge_detector edge_detector7(#RISE(0), #FALL(1));
    edge_detector edge_detector8(#RISE(0), #FALL(1));
    edge_detector edge_detector9(#RISE(0), #FALL(1));
    edge_detector edge_detector10(#RISE(0), #FALL(1));
    
    button_conditioner button_conditioner1;
    button_conditioner button_conditioner2;
    button_conditioner button_conditioner3;
    button_conditioner button_conditioner4;
    button_conditioner button_conditioner5;
    button_conditioner button_conditioner6;
    button_conditioner button_conditioner7;
    button_conditioner button_conditioner8;
    button_conditioner button_conditioner9;
    button_conditioner button_conditioner10;
        
    .rst(rst){
      fsm state(#INIT(START)) = {START, MAP, PRESS_ME, ZAPPED, END};
    }
    
  }

  always {       
  //  led=8h00;
    instr = 16b0;
    player = 2b00;
    playerr=stage1.q[1:0];//output
    play_row_1 = 10b0;
    play_row_2 = 10b0;
    score_rows_1 = led_counter.q[2:0];
    score_rows_2 = led_counter2.q[2:0];
    led_counter.d=led_counter.q;
    led_counter2.d = led_counter2.q;
    //score_rows_1[2]=xx.q;
    button_conditioner1.in = btn1;
    button_conditioner2.in = btn2;
    button_conditioner3.in = btn3;
    button_conditioner4.in = btn4;
    button_conditioner5.in = btn5;
    button_conditioner6.in = btn6;
    button_conditioner7.in = btn7;
    button_conditioner8.in = btn8;
    button_conditioner9.in = btn9;
    button_conditioner10.in = btn10;
       
    edge_detector1.in = button_conditioner1.out;
    edge_detector2.in = button_conditioner2.out;
    edge_detector3.in = button_conditioner3.out;
    edge_detector4.in = button_conditioner4.out;
    edge_detector5.in = button_conditioner5.out;
    edge_detector6.in = button_conditioner6.out;
    edge_detector7.in = button_conditioner7.out;
    edge_detector8.in = button_conditioner8.out;
    edge_detector9.in = button_conditioner9.out;
    edge_detector10.in = button_conditioner10.out;
    
    bo1 = edge_detector1.out;
    bo2 = edge_detector2.out;
    bo3 = edge_detector3.out;
    bo4 = edge_detector4.out;
    bo5 = edge_detector5.out;
    bo6 = edge_detector6.out;
    bo7 = edge_detector7.out;
    bo8 = edge_detector8.out;
    bo9 = edge_detector9.out;
    bo10 = edge_detector10.out;
    
    
    case(state.q){
      state.START:
        //play_row_1[0] = b1;
        // do the initial mapping of buttons and reset stuff
        cuicui.d=1b1;
        //reset stuff
        stage1.d[1:0] = 2b00;
        stage2.d[1:0] = 2b00;
        led_counter.d[2:0]=3b0;
        led_counter2.d[2:0] = 3b0;
        play_row_1 = 10b0;
        play_row_2 = 10b0;
        instr = c{4b0001, player, 10b0101010101};
                       // signal we want to write
        if(cuicui.q){
        state.d = state.MAP;
          cuicui.d=0;
        }
        
        
      /*state.MAP:
        //play_row_1[1] = b1;
        //choose the stage (based on bit), assign buttons to 16 bit code (4 codes to 8 buttons)
        //stage chooses addr in RAM
        if (player == 2b01) { ram.address = 2b0;}
        else {if (player == 2b10) { ram.address = stage2.q[1:0];}}
       
        
        //b1 = code, b2 = code, ..... --> just pull from RAM
        
        state.d = state.PRESS_ME;
        */
      
      state.MAP:
        //button pressed, go to function
        //if (b1,b2, b3, .... is high) { go next FUNCTION}
      //  if (bo1 | bo2 | bo3 | bo4 | bo5 | bo6 | bo7 | bo8 | bo9 | bo10) { state.d = state.FUNCTION; }
     //   led=8h00;
     // state.FUNCTION:
       // play_row_1[3] = b1;
        //take code from RAM, add player
        if (bo1 | bo2 | bo3 | bo4 | bo5) { 
          player = 2b01;
          play.d[1:0]=player;
        }
        else if(bo6 | bo7 | bo8 | bo9 | bo10){ player = 2b10;
          play.d[1:0]=player;
          }
        
        
        if (bo1 == 1 | bo6 == 1) { 
          if(stage1.q[1:0]==2b00){instr = c{4b0001, player, 10b0101010101};     }
          else if(stage1.q[1:0]==2b01){instr =c{4b0001, player, 10b0100100100};     } //mul of 3
          else if (stage1.q[1:0]==2b10){instr = c{4b0010, player, 10b0000000001};     }
        }
          
          
        else if (bo2 == 1 | bo7 == 1){ 
          if(stage1.q[1:0]==2b00){ instr = c{4b0010, player, 10b0000000001};     }
          else if(stage1.q[1:0]==2b01){instr = c{4b0010, player, 10b0000000100};     } //SHL 4
          else if (stage1.q[1:0]==2b10){instr = c{4b0001, player, 10b0101010101};     }
        }
          
          
        else if (bo3 == 1 | bo8 == 1) { 
          if(stage1.q[1:0]==2b00){ instr = c{4b0011, player, 10b0000000001};  }
          else if(stage1.q[1:0]==2b01){instr = c{4b0011, player, 10b0000000010};     } // SHR 2
          else if (stage1.q[1:0]==2b10){ instr = c{4b0011, player, 10b0000000001}; }
        }
          
        else if (bo4 == 1 | bo9 == 1) {  
          if(stage1.q[1:0]==2b00){ instr =c{4b0001, player, 10b1010101010};   }
          else if(stage1.q[1:0]==2b01){instr =c{4b0001, player, 10b0101010101};     } // ODD
          else if (stage1.q[1:0]==2b10){ instr =c{4b0001, player, 10b1010101010}; }
        }
          
        else if (bo5 == 1 | bo10 ==1) { instr = c{4b0000, player, 10b0000000000};}  //reset code
        
        //pass instr to ctl/alu --> top file
        //rx code, do the LED lighting, check zap n move on
        
        //play row lighting --> top file (boardstate_1, boardstate_2)
        //nvm, it is here
        
        //if (player == 2b01) { play_row_1 = alu_output[9:0];}
        //else { if (player == 2b10) { play_row_2 = alu_output[9:0];}}
        
       // if (zap == 0) { state.d = state.PRESS_ME;}
        if (zap) { state.d = state.ZAPPED;
        if(clear.q){instr = c{4b0000, 001, 10b0000000000};
        clear.d=0;}
            }
      
        
      state.ZAPPED:
        //play_row_1[4] = b1;
        //line++, do lighting of lines (the next row of lights)
        
        // grab current light state of player in question
        
        //if (line 1 is 0) { light line 1}
        //elif (line 2 is 0) { light line 2}
        //else (ie line 1 and 2 is 1) { light line 0}
        //player=2b01;
        clear.d=1;
        player=play.q[1:0];
        playerr=stage1.q;
        
        if (player == 2b01) {  //player 1
          
          if (stage1.q[1:0]== 2b00) { led_counter.d[2:0]= 3b001;
          stage1.d = stage1.q + 1;}
          else if (stage1.q[1:0] == 2b01) { led_counter.d[2:0]= 3b011;
          stage1.d = stage1.q + 1;}
          else if (stage1.q[1:0] == 2b10) { led_counter.d[2:0] = 3b111;
          stage1.d = stage1.q + 1;
  //          state.d=state.END;
         }

           state.d = state.MAP;
            } 
        
          else if (player == 2b10) {  //player 2
          
          if (stage2.q[1:0]== 2b00) { led_counter.d[2:0]= 3b001;
          stage2.d = stage2.q + 1;}
          else if (stage2.q[1:0] == 2b01) { led_counter.d[2:0]= 3b011;
          stage2.d = stage2.q + 1;}
          else if (stage2.q[1:0] == 2b10) { led_counter.d[2:0] = 3b111;
          stage2.d = stage2.q + 1;
  //          state.d=state.END;
         }

           state.d = state.MAP;
            } 

        
        //check line/stage == 3, if true go to END, else go MAP 
        
     
        /* else {  //player 2
          if (stage2.q[1:0] == 2b00) { score_rows_2 = 3b001;}
          else { if (stage2.q[1:0] == 2b01) { score_rows_2 = 3b011;}
            else { score_rows_2 = 3b111;} }
        
        stage2.d = stage2.q + 1;
        //check line/stage == 3, if true go to END, else go MAP 
        if (stage2.q[1:0] == 2b11) { state.d = state.END;}
        else { state.d = state.MAP;} 
                   // led_counter.d[2:0] =3b111;  
          } */
        
      state.END:
        //play_row_1[5] = b1;
        //do winning shit, eg flash flash + buzz buzz
        
        state.d = state.START;  // so can restart without off-ing

      
    } 
  }
}
